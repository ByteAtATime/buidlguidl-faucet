{
  "address": "0x71622a120fAc17d4990c5643003b9f9a1E73682F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUIDLGUIDL_ORACLE",
      "outputs": [
        {
          "internalType": "contract BuidlGuidlOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nextClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3686a4cb2321421c7bd2fdd923e3373c21b8c88f97becbb81623625259a2f145",
  "receipt": {
    "to": null,
    "from": "0x598cb95773D9b66a27a5780DB5EED2d018685879",
    "contractAddress": "0x71622a120fAc17d4990c5643003b9f9a1E73682F",
    "transactionIndex": 59,
    "gasUsed": "499281",
    "logsBloom": "0x
    "blockHash": "0x58209dbd6bb30f4e1de02f071cb7c7f201b93804070ae5788d604fb337ad1593",
    "transactionHash": "0x3686a4cb2321421c7bd2fdd923e3373c21b8c88f97becbb81623625259a2f145",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 5812528,
        "transactionHash": "0x3686a4cb2321421c7bd2fdd923e3373c21b8c88f97becbb81623625259a2f145",
        "address": "0x71622a120fAc17d4990c5643003b9f9a1E73682F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000598cb95773d9b66a27a5780db5eed2d018685879"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x58209dbd6bb30f4e1de02f071cb7c7f201b93804070ae5788d604fb337ad1593"
      }
    ],
    "blockNumber": 5812528,
    "cumulativeGasUsed": "6473725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5384914af40007ecf14f23476457d8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUIDLGUIDL_ORACLE\",\"outputs\":[{\"internalType\":\"contract BuidlGuidlOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface BuidlGuidlOracle {\\n\\tfunction isMember(\\n\\t\\tbytes32[] memory _proof,\\n\\t\\taddress _member\\n\\t) external view returns (bool);\\n}\\n\\ncontract Faucet is Ownable {\\n\\tBuidlGuidlOracle public constant BUIDLGUIDL_ORACLE =\\n\\t\\tBuidlGuidlOracle(0xEC3aEf6c2b8B394eEd0E9D92286E716C6CCE5B81);\\n\\tuint256 public claimAmount = 0.1 ether;\\n\\tuint256 public claimPeriod = 1 days;\\n\\n\\tmapping(address => uint256) public nextClaimTime;\\n\\n\\tevent Withdrawal(address indexed to, uint256 amount);\\n\\n\\tfunction withdraw(bytes32[] memory _proof, address _to) external {\\n\\t\\trequire(\\n\\t\\t\\taddress(this).balance >= claimAmount,\\n\\t\\t\\t\\\"Not enough balance in the faucet!\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= nextClaimTime[_to],\\n\\t\\t\\t\\\"Please wait a little bit before withdrawing again!\\\"\\n\\t\\t);\\n\\n\\t\\trequire(BUIDLGUIDL_ORACLE.isMember(_proof, _to), \\\"You have to be a member of the BuidlGuidl!\\\");\\n\\n\\t\\tnextClaimTime[_to] = block.timestamp + claimPeriod;\\n\\n\\t\\tpayable(_to).transfer(claimAmount);\\n\\t\\temit Withdrawal(_to, claimAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x49c9aea0c66161755217b30ac8c428f13b71bb77e7e5dd48d82c0cc46cc35ee2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a00006001556201518060025534801561002357600080fd5b5061002d33610032565b610082565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106ce806100916000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063830953ab1161005b578063830953ab146100e65780638da5cb5b146100ef578063b53214cf14610114578063f2fde38b1461012f57600080fd5b806338be55921461008d57806370f23da7146100a2578063715018a6146100d55780637dc2cd98146100dd575b600080fd5b6100a061009b366004610509565b610142565b005b6100c26100b03660046105d9565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100a06103a0565b6100c260025481565b6100c260015481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cc565b6100fc73ec3aef6c2b8b394eed0e9d92286e716c6cce5b8181565b6100a061013d3660046105d9565b6103b4565b6001544710156101a35760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f7567682062616c616e636520696e20746865206661756365746044820152602160f81b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360205260409020544210156102265760405162461bcd60e51b815260206004820152603260248201527f506c6561736520776169742061206c6974746c6520626974206265666f7265206044820152717769746864726177696e6720616761696e2160701b606482015260840161019a565b6040516308637e9160e11b815273ec3aef6c2b8b394eed0e9d92286e716c6cce5b81906310c6fd229061025f90859085906004016105fb565b602060405180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061064f565b6102ff5760405162461bcd60e51b815260206004820152602a60248201527f596f75206861766520746f2062652061206d656d626572206f662074686520426044820152697569646c477569646c2160b01b606482015260840161019a565b60025461030c9042610671565b6001600160a01b038216600081815260036020526040808220939093556001549251919280156108fc02929091818181858888f19350505050158015610356573d6000803e3d6000fd5b50806001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6560015460405161039491815260200190565b60405180910390a25050565b6103a861042d565b6103b26000610487565b565b6103bc61042d565b6001600160a01b0381166104215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161019a565b61042a81610487565b50565b6000546001600160a01b031633146103b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161019a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461050457600080fd5b919050565b6000806040838503121561051c57600080fd5b823567ffffffffffffffff8082111561053457600080fd5b818501915085601f83011261054857600080fd5b813560208282111561055c5761055c6104d7565b8160051b604051601f19603f83011681018181108682111715610581576105816104d7565b60405292835281830193508481018201928984111561059f57600080fd5b948201945b838610156105bd578535855294820194938201936105a4565b96506105cc90508782016104ed565b9450505050509250929050565b6000602082840312156105eb57600080fd5b6105f4826104ed565b9392505050565b604080825283519082018190526000906020906060840190828701845b8281101561063457815184529284019290840190600101610618565b5050506001600160a01b039490941692019190915250919050565b60006020828403121561066157600080fd5b815180151581146105f457600080fd5b8082018082111561069257634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122076a63caa9e8899b3afd0040519a8baa9a24f6586743c8d7e754618a3da3062e264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063830953ab1161005b578063830953ab146100e65780638da5cb5b146100ef578063b53214cf14610114578063f2fde38b1461012f57600080fd5b806338be55921461008d57806370f23da7146100a2578063715018a6146100d55780637dc2cd98146100dd575b600080fd5b6100a061009b366004610509565b610142565b005b6100c26100b03660046105d9565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100a06103a0565b6100c260025481565b6100c260015481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cc565b6100fc73ec3aef6c2b8b394eed0e9d92286e716c6cce5b8181565b6100a061013d3660046105d9565b6103b4565b6001544710156101a35760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f7567682062616c616e636520696e20746865206661756365746044820152602160f81b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360205260409020544210156102265760405162461bcd60e51b815260206004820152603260248201527f506c6561736520776169742061206c6974746c6520626974206265666f7265206044820152717769746864726177696e6720616761696e2160701b606482015260840161019a565b6040516308637e9160e11b815273ec3aef6c2b8b394eed0e9d92286e716c6cce5b81906310c6fd229061025f90859085906004016105fb565b602060405180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061064f565b6102ff5760405162461bcd60e51b815260206004820152602a60248201527f596f75206861766520746f2062652061206d656d626572206f662074686520426044820152697569646c477569646c2160b01b606482015260840161019a565b60025461030c9042610671565b6001600160a01b038216600081815260036020526040808220939093556001549251919280156108fc02929091818181858888f19350505050158015610356573d6000803e3d6000fd5b50806001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6560015460405161039491815260200190565b60405180910390a25050565b6103a861042d565b6103b26000610487565b565b6103bc61042d565b6001600160a01b0381166104215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161019a565b61042a81610487565b50565b6000546001600160a01b031633146103b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161019a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461050457600080fd5b919050565b6000806040838503121561051c57600080fd5b823567ffffffffffffffff8082111561053457600080fd5b818501915085601f83011261054857600080fd5b813560208282111561055c5761055c6104d7565b8160051b604051601f19603f83011681018181108682111715610581576105816104d7565b60405292835281830193508481018201928984111561059f57600080fd5b948201945b838610156105bd578535855294820194938201936105a4565b96506105cc90508782016104ed565b9450505050509250929050565b6000602082840312156105eb57600080fd5b6105f4826104ed565b9392505050565b604080825283519082018190526000906020906060840190828701845b8281101561063457815184529284019290840190600101610618565b5050506001600160a01b039490941692019190915250919050565b60006020828403121561066157600080fd5b815180151581146105f457600080fd5b8082018082111561069257634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122076a63caa9e8899b3afd0040519a8baa9a24f6586743c8d7e754618a3da3062e264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 159,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "claimAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 162,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "claimPeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 166,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "nextClaimTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}